@model ATLManager.Models.VisitaEstudo
@using Microsoft.AspNetCore.Identity
@using ATLManager.Areas.Identity.Data
@using System.Web;

@inject SignInManager<ATLManagerUser> SignInManager
@inject UserManager<ATLManagerUser> UserManager

@{
    ViewData["Title"] = "Details";
}

@if (SignInManager.IsSignedIn(User))
{
    <div class="d-flex justify-content-center ms-2 pb-2" style="padding-left: 2%; padding-top: 2%;">
        <h1 class="me-3 fw-bold text-center mb-4">Detalhes da consulta</h1>
        <img src="~/images/icons/search-group.png" width="50" height="50">
    </div>
    <!-- Fase 1  -->
    <!-- d-flex -->
    <div class="d-flex justify-content-center mt-5">
        <!-- Box  -->
        <div class="row col-6 justify-content-center custom-box w-50" id="myBox">
            <div class="row box border-5 p-5">
                <div class="container">
                    
                    <div class="row mt-3 text-center">
                        <div class="mb-3">
                            <img src="~/images/uploads/visitasEstudo/@Model.Picture"
                                 class="rounded-circle mb-3"
                                 style="width:15%"
                             asp-append-version="true" />
                            <dl class="row text-end">
                                <div class="row">
                                    <dt class="col mr-2">
                                        @Html.DisplayNameFor(model => model.Name)
                                    </dt>

                                    <dd class="col text-left">
                                        @Html.DisplayFor(model => model.Name)
                                    </dd>
                                </div>

                                <div class="row">
                                    <dt class="col mr-2">
                                        @Html.DisplayNameFor(model => model.Location)
                                    </dt>

                                    <dd class="col text-left">
                                        @Html.DisplayFor(model => model.Location)
                                    </dd>
                                </div>

                                <div class="row">
                                    <dt class="col mr-2">
                                        @Html.DisplayNameFor(model => model.Date)
                                    </dt>

                                    <dd class="col text-left">
                                        @Html.DisplayFor(model => model.Date)
                                    </dd>
                                </div>

                                <div class="row">
                                    <dt class="col mr-2">
                                        @Html.DisplayNameFor(model => model.Descripton)
                                    </dt>

                                    <dd class="col text-left">
                                        @Html.DisplayFor(model => model.Descripton)
                                    </dd>

                                    <div id="map" style="width: 100%; height: 250px; border-radius: 15px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);">
                                        <div id="mapError" style="display: none; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center;">
                                            <h4>Localização não encontrada</h4>
                                        </div>
                                    </div>

                                </div>

                            </dl>
                            <hr />
                            <div class="d-flex text-center mt-4">
                                <div class="col">
                                    <a asp-action="Index">
                                        <button type="button"
                                                class="btn btn-secondary custom-button w-50" style="border-radius:6em">
                                            Voltar
                                        </button>
                                    </a>
                                </div>
                            </div>


                            <div>
                                @*<a asp-action="Edit" asp-route-id="@Model?.AgrupamentoID">Edit</a> |*@

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- // Box -->
        </div>
        <!-- // Fase 1 -->
    </div>

    <script>
        window.onload = function () {
            var divBox = document.getElementById("myBox")

            if (screen.width >= 1366 && screen.height >= 768 && screen.width < 1920 && screen.height <= 1080) {
                // Large screen
                divBox.classList.remove("col-6");
                divBox.classList.add("col-8");
            }
        }
    </script>

    <script>
        // Função para inicializar o mapa
        function initMap() {
            var map = L.map('map').setView([0, 0], 13);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            return map;
        }

        // Função para buscar as coordenadas de um endereço usando a API Nominatim do OpenStreetMap
        async function getLocation(address) {
            const encodedAddress = encodeURIComponent(address);
            const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&limit=1&q=${encodedAddress}`);
            const data = await response.json();

            if (data.length > 0) {
                return {
                    lat: parseFloat(data[0].lat),
                    lng: parseFloat(data[0].lon)
                };
            }

            return null;
        }

        // Função principal
        async function main(location) {
            const coordinates = await getLocation(location);

            if (coordinates) {
                const map = initMap();
                map.setView([coordinates.lat, coordinates.lng], 13);

                L.marker([coordinates.lat, coordinates.lng]).addTo(map)
                    .bindPopup(`<b>${location}</b>`)
                    .openPopup();
            } else {
                document.getElementById("mapError").style.display = "block";
            }
        }


        main('@Html.Raw(HttpUtility.JavaScriptStringEncode(Model.Location))');
    </script>

}

        