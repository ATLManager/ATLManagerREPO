@model ATLManager.Models.VisitaEstudo
@using Microsoft.AspNetCore.Identity
@using ATLManager.Areas.Identity.Data
@using System.Web;

@inject SignInManager<ATLManagerUser> SignInManager
@inject UserManager<ATLManagerUser> UserManager

@{
    ViewData["Title"] = "Detalhes da Visita de Estudo";
}
<link rel='stylesheet' type='text/css' media='screen' href='~/css/custom-box-12.css'>

@if (SignInManager.IsSignedIn(User))
{
    <div class="d-flex justify-content-center ms-2 pb-2" style="padding-left: 2%; padding-top: 0%;">
        <h1 class="me-3 fw-bold text-center mb-0">Detalhes da consulta</h1>
        <img src="~/images/icons/search-group.png" width="50" height="50">
    </div>
    <!-- Fase 1  -->
    <!-- d-flex -->
    <div class="d-flex justify-content-center mt-3">
        <!-- Box  -->
        <div class="row justify-content-center custom-box" id="myBox">
            <div class="row box border-5 p-5">
                <div class="container">
                    <div class="row mt-3 text-center">
                        <div class="mb-3">
                            <img src="~/images/uploads/visitas/@Model.Picture"
                                 class="rounded-circle mb-3"
                                 style="width:11%"
                             asp-append-version="true" />
                            <dl class="row text-end">
                                <div class="row">
                                    <dt class="col mr-2">
                                        @Html.DisplayNameFor(model => model.Name)
                                    </dt>

                                    <dd class="col text-left">
                                        @Html.DisplayFor(model => model.Name)
                                    </dd>
                                </div>

                                <div class="row">
                                    <dt class="col mr-2">
                                        @Html.DisplayNameFor(model => model.Location)
                                    </dt>

                                    <dd class="col text-left">
                                        @Html.DisplayFor(model => model.Location)
                                    </dd>
                                </div>

                                <div class="row">
                                    <dt class="col mr-2">
                                        @Html.DisplayNameFor(model => model.Date)
                                    </dt>

                                    <dd class="col text-left">
                                        @Html.DisplayFor(model => model.Date)
                                    </dd>
                                </div>

                                <div class="row">
                                    <dt class="col mr-2">
                                        @Html.DisplayNameFor(model => model.Description)
                                    </dt>

                                    <dd class="col text-left">
                                        @Html.DisplayFor(model => model.Description)
                                    </dd>
                                </div>

                                <div class="row">
                                    <dt class="col text-center mt-4">
                                        <div id="map" style="width: 100%; height: 250px; border-radius: 15px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); margin: 0 auto;">
                                            <div id="mapError" style="display: none; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; margin: 0 auto;">
                                                <h4>Localização não encontrada</h4>
                                            </div>
                                        </div>
                                    </dt>
                                </div>
                            </dl>
                            <hr />
                            <div class="d-flex text-center mt-4">
                                <div class="col-8 text-right">
                                    <a asp-action="Index">
                                        <button type="button"
                                                class="btn btn-secondary custom-button w-50" style="border-radius:6em">
                                            Voltar
                                        </button>
                                    </a>
                                </div>
                            </div>


                            <div>
                                @*<a asp-action="Edit" asp-route-id="@Model?.AgrupamentoID">Edit</a> |*@

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- // Box -->
        </div>
        <!-- // Fase 1 -->
    </div>
    
    
    <!-- JS do Google Maps API -->
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC89_FsNcLfp7fNL0m7KhpJRn5PRrpdxEE&callback=init"></script>

    <script>
        // Função para inicializar o mapa
        function initMap(lat, lng) {
            var map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: lat, lng: lng },
                zoom: 13
            });

            return map;
        }


        // Função para inicializar o mapa e executar a função principal
        async function init() {
            const location = '@Html.Raw(HttpUtility.JavaScriptStringEncode(Model.Location))';
            try {
                const coordinates = await getLocation(location);
                window.map = initMap(coordinates.lat, coordinates.lng);
                main(location, coordinates);
            } catch (error) {
                console.error(error);
                document.getElementById('mapError').style.display = 'block';
            }
        }

        // Função para buscar as coordenadas de um endereço usando a API Geocoding do Google Maps
        async function getLocation(address) {
            return new Promise((resolve, reject) => {
                const geocoder = new google.maps.Geocoder();
                geocoder.geocode({ address: address }, (results, status) => {
                    if (status === google.maps.GeocoderStatus.OK) {
                        const coordinates = {
                            lat: results[0].geometry.location.lat(),
                            lng: results[0].geometry.location.lng()
                        };
                        resolve(coordinates);
                    } else {
                        reject(new Error('Localização não encontrada'));
                    }
                });
            });
        }

        // Função principal
        async function main(location, coordinates) {
            const marker = new google.maps.Marker({
                position: coordinates,
                map: window.map
            });

            const infoWindow = new google.maps.InfoWindow({
                content: `<b>${location}</b>`
            });

            marker.addListener('click', () => {
                infoWindow.open(window.map, marker);
            });

            document.getElementById('map').style.display = 'block';
        }


    </script>

}

        