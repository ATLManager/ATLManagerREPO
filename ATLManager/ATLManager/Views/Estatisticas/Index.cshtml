@using Microsoft.AspNetCore.Identity
@using ATLManager.Areas.Identity.Data

@{
	ViewData["Title"] = "Estatísticas";
}
<link rel='stylesheet' type='text/css' media='screen' href='~/css/custom-box-12.css'>

@inject SignInManager<ATLManagerUser> SignInManager
@inject UserManager<ATLManagerUser> UserManager

@{
	string[] meses = new string[]
	{
		"Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho",
		"Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"
	};
}

@if (SignInManager.IsSignedIn(User))
{

	<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap">

	<style>

		* {
			font-family: 'Poppins', sans-serif;
		}

		h3 {
			text-align: center;
			color: #3F51B5;
			margin-bottom: 20px;
		}

		h1 {
			text-align: center;
		}

		.chart-container {
			position: relative;
			height: 400px;
			width: 100%;
		}

			.chart-container canvas {
				position: absolute;
				top: 0;
				left: 0;
				bottom: 0;
				right: 0;
			}

		.table-container {
			margin-bottom: 100px;
			overflow-x: auto;
		}

		.col-md-6 {
			margin-bottom: 30px;
		}

		.d-flex {
			margin-bottom: 10px;
		}

		.table {
			width: 100%;
		}

		/* Customização de cores, espaçamento e ícones */
		.container {
			border-radius: 5px;
			padding: 20px;
		}

		.row {
			margin-top: 20px;
		}

		.form-control {
			margin-left: 10px;
		}


		.no-formulario-msg h4 {
			color: red;
			font-weight: bold;
		}

	</style>

	<!-- Container -->
	<div class="container-fluid">
		<div class="d-flex justify-content-center ms-2 pb-2" style="padding-left: 2%; padding-top: 0%;">
			<h1 class="me-3 fw-bold text-center mb-0">@ViewData["Title"]</h1>
			<img src="~/images/icons/search-group.png" width="50" height="50">
		</div>
			<div class="row" style="padding-left: 6em;">
				<div class="col text-right pb-2" id="divQuestion">
					<button class="btn btn-primary rounded-circle" id="btn-ajuda">
						<img src="~/images/question.png" alt="Imagem 1" class="img-fluid" width="15">
					</button>
				</div>
			</div>

		<!-- Fase 1  -->
		<!-- d-flex -->
		<div class="d-flex justify-content-center" id="divFase1">
			<!-- Box  -->
			<div class="row justify-content-center custom-box" id="myBox">
				<div class="row box border-5">

					<div class="container">
						@if (User.IsInRole("Coordenador") || User.IsInRole("Funcionario"))
						{
							<div class="row">
								<div class="col-md-6">
									<h3>Visitas de Estudo por Mês</h3>
									@if (ViewBag.Formularios.Count == 0)
									{
										<div id="noFormulariosMessage" class="text-center no-formulario-msg">
											<h4>Formulários não criado</h4>
										</div>
									}
									else
									{
										<div class="chart-container">
											<canvas id="visitasEstudoPorMesChartCoord"></canvas>
										</div>
									}
								</div>
								<div class="col-md-6">
									<h3>Atividades por Mês</h3>
									<div class="chart-container">
										<canvas id="atividadesPorMesChartCoord"></canvas>
									</div>
								</div>
							</div>

							<div class="row">
								<div class="col-md-6">
									<h3>Número de Educandos Inscritos Por Mês</h3>
									<p>+ @Model.NumeroDeEducandosNovos @(
								(Model.NumeroDeEducandosNovos == 1) ? "Educando" : "Educandos"
								) inscritos no último mês</p>
									<div class="chart-container">
										<canvas id="educandosPorMesChart"></canvas>
									</div>
								</div>
								<div class="col-md-6">
									<h3>Número de Rapazes & Número de Raparigas</h3>
									<p>@Model.NumeroDeEducandos Educandos no Total no ATL</p>
									<div class="chart-container">
										<canvas id="generoEducandosChart"></canvas>
									</div>
								</div>
							</div>

							<div class="row">
								<div class="col-md-6">
									<h3>Faturas em Atraso</h3>
									<p>Quantidade: @Model.FaturasEmAtraso</p>
									<p>Valor total: @Model.TotalValorEmAtraso.ToString("C")</p>
								</div>
								<div class="col-md-6">
									<h3>Faturas Pagas</h3>
									<p>Quantidade: @Model.FaturasPagas</p>
									<p>Valor total: @Model.TotalValorPago.ToString("C")</p>
								</div>
							</div>
							<div class="row">
								<div class="col-md-3"></div>
								<div class="col-md-6">
									<div class="chart-container">
										<canvas id="faturasChart"></canvas>
									</div>
								</div>
								<div class="col-md-3"></div>
							</div>
						}

						@if (User.IsInRole("Administrador"))
							{
								<div class="row">
									<div class="col-md-12 d-flex justify-content-center">
										<label for="atl-select" class="form-label">Selecione o ATL:</label>
										<select class="form-select" id="atl-select" onchange="updateStats()">
											<option value="0" selected>Escolha o ATL...</option>
											@foreach (var atl in ViewBag.ATLs)
											{
											<option value="@atl.AtlId">@atl.Name</option>
											}
										</select>
									</div>
								</div>
    
								<div class="row">
									<div class="col-md-6">
										<h3>Visitas de Estudo por Mês</h3>
										<div class="chart-container">
											<canvas id="visitasEstudoPorMesChart"></canvas>
										</div>
									</div>
									<div class="col-md-6">
										<h3>Atividades por Mês</h3>
										<div class="chart-container">
											<canvas id="atividadesPorMesChart"></canvas>
										</div>
									</div>
								</div>

								<div class="row">
									<div class="col-md-6">
										<h3>Número de Educandos Inscritos Por Mês</h3>
										<p>+ <span id="numeroDeEducandosNovos"></span> Educandos inscritos no último mês</p>
										<div class="chart-container">
											<canvas id="educandosPorMesChart"></canvas>
										</div>
									</div>
									<div class="col-md-6">
										<h3>Número de Rapazes & Número de Raparigas</h3>
										<p><span id="numeroDeEducandos"></span> Educandos no Total no ATL</p>
										<div class="chart-container">
											<canvas id="generoEducandosChart"></canvas>
										</div>
									</div>
								</div>

								<div class="row">
									<div class="col-md-6">
										<h3>Faturas em Atraso</h3>
										<p>Quantidade: <span id="faturas-em-atraso-quantidade"></span></p>
										<p>Valor total: <span id="faturas-em-atraso-valor"></span></p>
									</div>
									<div class="col-md-6">
										<h3>Faturas Pagas</h3>
										<p>Quantidade: <span id="faturas-pagas-quantidade"></span></p>
										<p>Valor total: <span id="faturas-pagas-valor"></span></p>
									</div>
								</div>
								<div class="row">
									<div class="col-md-3"></div>
									<div class="col-md-6">
									<div class="chart-container">
										<canvas id="faturasChart"></canvas>
									</div>
								</div>
								<div class="col-md-3"></div>
							</div>
						}

					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Slide de Ajuda  -->
	<div id="menu-ajuda" class="bg-primary animate__animated animate__slideInLeft">

		<div class="row text-center mt-2">
			<div class="col-10 ">
				<h2 class="text-white ms-5">Ajuda</h2>
			</div>

			<div class="col-2">
				<button type="button" class="btn-close text-reset" id="close-ajuda" aria-label="Close"></button>
			</div>
		</div>
		<div class="">
			<input class="form-control mr-sm-2 mb-3 p-2 text-center" type="search"
				   placeholder="Procure artigos que o ajude" aria-label="Search" style="border-radius: 10px;">
		</div>
		<!-- -->
		<ul class="row justify-content-center p-4 bg-white mt-4 "
			style="position: absolute;   right: 0em; left: 0em; height: 80%;">
			<li class="row">
				<button type="button" class="btn btn-help helpShadowButton border-0 mt-3 fw-bold" id="showText1">
					<div class="d-flex align-items-center justify-content-center">

						<span>Como alterar uma visita de estudo</span>
						<img src="~/images/guide/dropdown.png" style="padding-left: 2%;">
					</div>
				</button>


				<span class="myText p-3 helpShadowButton" id="displayText1" style="display: none; position: relative;">
					Here's some more textHere's some more textHere's some more textHere's some
					more textHe

				</span>
			</li>


			<li class="row">
				<button type="button" class="btn helpShadowButton border-0 mt-3 fw-bold" id="Artigos">
					<div class="d-flex align-items-center justify-content-center">
						<div class="col-3">
							<img src="~/images/guide/terms.png" class="">
						</div>
						<div class="col">
							<span>Leia artigos de ajuda</span>
						</div>
					</div>
				</button>
			</li>
			<li class="row">
				<button type="button" class="btn helpShadowButton border-0 mt-3 fw-bold" id="Artigos">
					<div class="d-flex align-items-center">
						<div class="col-3">
							<img src="~/images/guide/comunity.png" class="">
						</div>
						<div class="col">
							<span>Pergunte à comunidade</span>
						</div>
					</div>
				</button>
			</li>
			<li class="row">
				<button type="button" class="btn helpShadowButton border-0 mt-3 fw-bold" id="Artigos">
					<div class="d-flex align-items-center justify-content-center">
						<div class="col-3">
							<img src="~/images/guide/new.png" class="">
						</div>
						<div class="col">
							<span>Novas Atualizações</span>
						</div>
					</div>
				</button>
			</li>
			<li class="row">
				<button type="button" class="btn helpShadowButton border-0 mt-3 fw-bold" id="Artigos">
					<div class="d-flex align-items-center justify-content-center">
						<div class="col-3">
							<img src="~/images/guide/feedback.png" class="">
						</div>
						<div class="col">
							<span>Dê Feedback</span>
						</div>
					</div>

				</button>
			</li>
		</ul>
	</div>


	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	
	<script>

		// Gráfico de barras para as estatísticas de atividades por mês
		const visitasEstudoPorMesDataCoord = {
			labels: [
				'Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
				'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
			],
			datasets: [{
				label: 'Visitas de Estudo por Mês',
				data: [
		@Model.VisitasEstudoPorMesEstatisticasCoordenadores["VisitaEstudoMes1"],
		@Model.VisitasEstudoPorMesEstatisticasCoordenadores["VisitaEstudoMes2"],
		@Model.VisitasEstudoPorMesEstatisticasCoordenadores["VisitaEstudoMes3"],
		@Model.VisitasEstudoPorMesEstatisticasCoordenadores["VisitaEstudoMes4"],
		@Model.VisitasEstudoPorMesEstatisticasCoordenadores["VisitaEstudoMes5"],
		@Model.VisitasEstudoPorMesEstatisticasCoordenadores["VisitaEstudoMes6"],
		@Model.VisitasEstudoPorMesEstatisticasCoordenadores["VisitaEstudoMes7"],
		@Model.VisitasEstudoPorMesEstatisticasCoordenadores["VisitaEstudoMes8"],
		@Model.VisitasEstudoPorMesEstatisticasCoordenadores["VisitaEstudoMes9"],
		@Model.VisitasEstudoPorMesEstatisticasCoordenadores["VisitaEstudoMes10"],
		@Model.VisitasEstudoPorMesEstatisticasCoordenadores["VisitaEstudoMes11"],
		@Model.VisitasEstudoPorMesEstatisticasCoordenadores["VisitaEstudoMes12"]
										],
				backgroundColor: 'rgba(75, 192, 192, 0.2)',
				borderColor: 'rgba(75, 192, 192, 1)',
				borderWidth: 1
			}]
		};

		const visitasEstudoPorMesConfigCoord = {
			type: 'bar',
			data: visitasEstudoPorMesDataCoord,
			options: {
				scales: {
					y: {
						beginAtZero: true,
						max: Math.ceil(Math.max(...visitasEstudoPorMesDataCoord.datasets[0].data) / 5) * 5,
						ticks: {
							stepSize: 1,
							font: {
								size: 14,
								family: 'Poppins'
							}
						},
					},
					x: {
						ticks: {
							font: {
								size: 14,
								family: 'Poppins'
							}
						}
					}
				},
				plugins: {
					legend: {
						display: false
					}
				},
				responsive: true,
				maintainAspectRatio: false,
				layout: {
					padding: {
						left: 10,
						right: 10,
						top: 10,
						bottom: 10
					}
				}
			}
		};

		const visitasEstudoPorMesChartCoord = new Chart(
			document.getElementById('visitasEstudoPorMesChartCoord'),
			visitasEstudoPorMesConfigCoord
		);

		
		//const visitasEstudoPorMesData = {
		//	labels: [
		//		'Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
		//		'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
		//	],
		//	datasets: [{
		//		label: 'Visitas de Estudo por Mês',
		//		data: [
		//@Model.GetVisitasEstudoPorMesEstatisticasEnc["VisitaEstudoMes1"],
		//@Model.GetVisitasEstudoPorMesEstatisticasEnc["VisitaEstudoMes2"],
		//@Model.GetVisitasEstudoPorMesEstatisticasEnc["VisitaEstudoMes3"],
		//@Model.GetVisitasEstudoPorMesEstatisticasEnc["VisitaEstudoMes4"],
		//@Model.GetVisitasEstudoPorMesEstatisticasEnc["VisitaEstudoMes5"],
		//@Model.GetVisitasEstudoPorMesEstatisticasEnc["VisitaEstudoMes6"],
		//@Model.GetVisitasEstudoPorMesEstatisticasEnc["VisitaEstudoMes7"],
		//@Model.GetVisitasEstudoPorMesEstatisticasEnc["VisitaEstudoMes8"],
		//@Model.GetVisitasEstudoPorMesEstatisticasEnc["VisitaEstudoMes9"],
		//@Model.GetVisitasEstudoPorMesEstatisticasEnc["VisitaEstudoMes10"],
		//@Model.GetVisitasEstudoPorMesEstatisticasEnc["VisitaEstudoMes11"],
		//@Model.GetVisitasEstudoPorMesEstatisticasEnc["VisitaEstudoMes12"]
		//								],
		//		backgroundColor: 'rgba(75, 192, 192, 0.2)',
		//		borderColor: 'rgba(75, 192, 192, 1)',
		//		borderWidth: 1
		//	}]
		//};

		//const visitasEstudoPorMesConfig = {
		//	type: 'bar',
		//	data: visitasEstudoPorMesData,
		//	options: {
		//		scales: {
		//			y: {
		//				beginAtZero: true,
		//				max: Math.ceil(Math.max(...visitasEstudoPorMesData.datasets[0].data) / 5) * 5,
		//				ticks: {
		//					stepSize: 1,
		//					font: {
		//						size: 14,
		//						family: 'Poppins'
		//					}
		//				},
		//			},
		//			x: {
		//				ticks: {
		//					font: {
		//						size: 14,
		//						family: 'Poppins'
		//					}
		//				}
		//			}
		//		},
		//		plugins: {
		//			legend: {
		//				display: false
		//			}
		//		},
		//		responsive: true,
		//		maintainAspectRatio: false,
		//		layout: {
		//			padding: {
		//				left: 10,
		//				right: 10,
		//				top: 10,
		//				bottom: 10
		//			}
		//		}
		//	}
		//};

		//const visitasEstudoPorMesChart = new Chart(
		//	document.getElementById('visitasEstudoPorMesChart'),
		//	visitasEstudoPorMesConfig
		//);

		
		
		// Gráfico de barras para as estatísticas de atividades por mês
		const atividadesPorMesDataCoord = {
			labels: [
				'Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
				'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
			],
			datasets: [{
				label: 'Atividades por Mês',
				data: [
		@Model.AtividadesPorMesEstatisticasCoordenadores["AtividadesMes1"],
		@Model.AtividadesPorMesEstatisticasCoordenadores["AtividadesMes2"],
		@Model.AtividadesPorMesEstatisticasCoordenadores["AtividadesMes3"],
		@Model.AtividadesPorMesEstatisticasCoordenadores["AtividadesMes4"],
		@Model.AtividadesPorMesEstatisticasCoordenadores["AtividadesMes5"],
		@Model.AtividadesPorMesEstatisticasCoordenadores["AtividadesMes6"],
		@Model.AtividadesPorMesEstatisticasCoordenadores["AtividadesMes7"],
		@Model.AtividadesPorMesEstatisticasCoordenadores["AtividadesMes8"],
		@Model.AtividadesPorMesEstatisticasCoordenadores["AtividadesMes9"],
		@Model.AtividadesPorMesEstatisticasCoordenadores["AtividadesMes10"],
		@Model.AtividadesPorMesEstatisticasCoordenadores["AtividadesMes11"],
		@Model.AtividadesPorMesEstatisticasCoordenadores["AtividadesMes12"]
								],
				backgroundColor: 'rgba(75, 192, 192, 0.2)',
				borderColor: 'rgba(75, 192, 192, 1)',
				borderWidth: 1
			}]
		};

		const atividadesPorMesConfigCoord = {
			type: 'bar',
			data: atividadesPorMesDataCoord,
			options: {
				scales: {
					y: {
						beginAtZero: true,
						max: Math.ceil(Math.max(...atividadesPorMesDataCoord.datasets[0].data) / 5) * 5,
						ticks: {
							stepSize: 1,
							font: {
								size: 14,
								family: 'Poppins'
							}
						}
					},
					x: {
						ticks: {
							font: {
								size: 14,
								family: 'Poppins'
							}
						}
					}
				},
				plugins: {
					legend: {
						display: false
					}
				},
				responsive: true,
				maintainAspectRatio: false,
				layout: {
					padding: {
						left: 10,
						right: 10,
						top: 10,
						bottom: 10
					}
				}
			}
		};

		const atividadesPorMesChartCoord = new Chart(
			document.getElementById('atividadesPorMesChartCoord'),
			atividadesPorMesConfigCoord
		);


		//		// Gráfico de barras para as estatísticas de atividades por mês
		//const atividadesPorMesData = {
		//	labels: [
		//		'Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
		//		'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
		//	],
		//	datasets: [{
		//		label: 'Atividades por Mês',
		//		data: [
		//@Model.GetAtividadesPorMesEstatisticasEnc["AtividadesMes1"],
		//@Model.GetAtividadesPorMesEstatisticasEnc["AtividadesMes2"],
		//@Model.GetAtividadesPorMesEstatisticasEnc["AtividadesMes3"],
		//@Model.GetAtividadesPorMesEstatisticasEnc["AtividadesMes4"],
		//@Model.GetAtividadesPorMesEstatisticasEnc["AtividadesMes5"],
		//@Model.GetAtividadesPorMesEstatisticasEnc["AtividadesMes6"],
		//@Model.GetAtividadesPorMesEstatisticasEnc["AtividadesMes7"],
		//@Model.GetAtividadesPorMesEstatisticasEnc["AtividadesMes8"],
		//@Model.GetAtividadesPorMesEstatisticasEnc["AtividadesMes9"],
		//@Model.GetAtividadesPorMesEstatisticasEnc["AtividadesMes10"],
		//@Model.GetAtividadesPorMesEstatisticasEnc["AtividadesMes11"],
		//@Model.GetAtividadesPorMesEstatisticasEnc["AtividadesMes12"]
		//						],
		//		backgroundColor: 'rgba(75, 192, 192, 0.2)',
		//		borderColor: 'rgba(75, 192, 192, 1)',
		//		borderWidth: 1
		//	}]
		//};

		//const atividadesPorMesConfig = {
		//	type: 'bar',
		//	data: atividadesPorMesData,
		//	options: {
		//		scales: {
		//			y: {
		//				beginAtZero: true,
		//				max: Math.ceil(Math.max(...atividadesPorMesData.datasets[0].data) / 5) * 5,
		//				ticks: {
		//					stepSize: 1,
		//					font: {
		//						size: 14,
		//						family: 'Poppins'
		//					}
		//				}
		//			},
		//			x: {
		//				ticks: {
		//					font: {
		//						size: 14,
		//						family: 'Poppins'
		//					}
		//				}
		//			}
		//		},
		//		plugins: {
		//			legend: {
		//				display: false
		//			}
		//		},
		//		responsive: true,
		//		maintainAspectRatio: false,
		//		layout: {
		//			padding: {
		//				left: 10,
		//				right: 10,
		//				top: 10,
		//				bottom: 10
		//			}
		//		}
		//	}
		//};

		//const atividadesPorMesChart = new Chart(
		//	document.getElementById('atividadesPorMesChart'),
		//	atividadesPorMesConfig
		//);

		// Gráfico de barras para as estatísticas de educandos por mês
		const educandosPorMesData = {
			labels: [
				'Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
				'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
			],
			datasets: [{
				label: 'Educandos por Mês',
				data: [
					@Model.EducandosPorMes["EducandosMes1"],
					@Model.EducandosPorMes["EducandosMes2"],
					@Model.EducandosPorMes["EducandosMes3"],
					@Model.EducandosPorMes["EducandosMes4"],
					@Model.EducandosPorMes["EducandosMes5"],
					@Model.EducandosPorMes["EducandosMes6"],
					@Model.EducandosPorMes["EducandosMes7"],
					@Model.EducandosPorMes["EducandosMes8"],
					@Model.EducandosPorMes["EducandosMes9"],
					@Model.EducandosPorMes["EducandosMes10"],
					@Model.EducandosPorMes["EducandosMes11"],
					@Model.EducandosPorMes["EducandosMes12"]
										],
				backgroundColor: 'rgba(75, 192, 192, 0.2)',
				borderColor: 'rgba(75, 192, 192, 1)',
				borderWidth: 1
			}]
		};

		const educandosPorMesConfig = {
			type: 'bar',
			data: educandosPorMesData,
			options: {
				scales: {
					y: {
						beginAtZero: true,
						max: Math.ceil(Math.max(...educandosPorMesData.datasets[0].data) / 10) * 10,
						ticks: {
							stepSize: 1,
							font: {
								size: 14,
								family: 'Poppins'
							}
						}
					},
					x: {
						ticks: {
							font: {
								size: 14,
								family: 'Poppins'
							}
						}
					}
				},
				plugins: {
					legend: {
						display: false
					}
				},
				responsive: true,
				maintainAspectRatio: false,
				layout: {
					padding: {
						left: 10,
						right: 10,
						top: 10,
						bottom: 10
					}
				}
			}
		};

		const educandosPorMesChart = new Chart(
			document.getElementById('educandosPorMesChart'),
			educandosPorMesConfig
		);

		
		const generoEducandosData = {
			labels: ['Educandos'],
			datasets: [
				{
					label: 'Rapazes',
					data: [@Model.NumeroDeRapazes],
					backgroundColor: 'rgba(75, 192, 192, 0.2)',
					borderColor: 'rgba(75, 192, 192, 1)',
					borderWidth: 1
				},
				{
					label: 'Raparigas',
					data: [@Model.NumeroDeRaparigas],
					backgroundColor: 'rgba(255, 99, 132, 0.2)',
					borderColor: 'rgba(255, 99, 132, 1)',
					borderWidth: 1
				}
			]
		};

		const generoEducandosConfig = {
			type: 'bar',
			data: generoEducandosData,
			options: {
				scales: {
					y: {
						beginAtZero: true,
						max: Math.ceil(Math.max(...generoEducandosData.datasets[0].data) / 10) * 10,
						ticks: {
							stepSize: 1,
							font: {
								size: 14,
								family: 'Poppins'
							}
						}
					},
					x: {
						ticks: {
							font: {
								size: 14,
								family: 'Poppins'
							}
						}
					}
				},
				plugins: {
					legend: {
						display: true
					}
				},
				responsive: true,
				maintainAspectRatio: false,
				layout: {
					padding: {
						left: 10,
						right: 10,
						top: 10,
						bottom: 10
					}
				}
			}
		};

		const generoEducandosChart = new Chart(
			document.getElementById('generoEducandosChart'),
			generoEducandosConfig
		);

		const faturasData = {
			labels: ['Faturas Pagas', 'Faturas em Atraso'],
			datasets: [
				{
					data: [@Model.FaturasPagas, @Model.FaturasEmAtraso],
					backgroundColor: ['rgba(75, 192, 192, 0.2)', 'rgba(255, 99, 132, 0.2)'],
					borderColor: ['rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)'],
					borderWidth: 1
				}
			]
		};

		const faturasDataConfig = {
			type: 'doughnut',
			data: faturasData,
			options: {
				responsive: true,
				plugins: {
					legend: {
						position: 'top',
					},
					title: {
						display: true,
						text: 'Faturas Pagas x Faturas em Atraso'
					}
				}
			}
		};

		const faturasDataChart = new Chart(
			document.getElementById('faturasChart'),
			faturasDataConfig
		);

		function updateStats() {
			let atlId = document.getElementById("atl-select").value;

			console.log(atlId);
			// Busque as estatísticas para o ATL selecionado usando AJAX
			fetch(`/Estatisticas/GetEstatisticasPorATL?id=${atlId}`)
				.then(response => response.json())
				.then(data => {
					// Atualize os gráficos com os novos dados
					visitasEstudoPorMesChart.data.datasets[0].data = data.visitasEstudoPorMes;
					atividadesPorMesChart.data.datasets[0].data = data.atividadesPorMes;

					// Atualize todos os gráficos
					visitasEstudoPorMesChart.update();
					atividadesPorMesChart.update();
				})
				.catch(error => console.error("Erro ao buscar as estatísticas:", error));
		}
		
//		window.addEventListener('load', () => {
//  updateStats();
//});

	</script>

	<!-- // Slide de Ajuda  -->
	<!-- Search on table (Fase1) -->
	<script>
		// Get the input element and add an event listener for input
		const input = document.getElementById("nome");
		if (input) {
			input.addEventListener("input", function () {

				// Get the table and search for the input value
				const table = document.getElementById("myTable");
				const filter = input.value.toUpperCase();
				const rows = table.getElementsByTagName("tr");

				// Loop through all table rows, and hide those that don't match the search query
				for (let i = 0; i < rows.length; i++) {
					const cells = rows[i].getElementsByTagName("td");
					let match = false;
					for (let j = 0; j < cells.length; j++) {
						const cell = cells[j];
						if (cell) {
							const text = cell.textContent || cell.innerText;
							if (text.toUpperCase().indexOf(filter) > -1) {
								match = true;
								break;
							}
						}
					}
					rows[i].style.display = match ? "" : "none";
				}
			});
		}
	</script>
}