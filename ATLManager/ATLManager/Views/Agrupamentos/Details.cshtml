@model ATLManager.Models.Agrupamento
@using Microsoft.AspNetCore.Identity
@using ATLManager.Areas.Identity.Data

@inject SignInManager<ATLManagerUser> SignInManager
@inject UserManager<ATLManagerUser> UserManager
@{
	ViewData["Title"] = "Detalhes do Agrupamento";
}

<link rel='stylesheet' type='text/css' media='screen' href='~/css/custom-box-12.css'>

@if (SignInManager.IsSignedIn(User))
{

	<!-- Fase 1  -->
	<!-- d-flex -->
	<div class="d-flex justify-content-center ms-2 pb-2" style="padding-left: 2%; padding-top: 0%;">
		<h1 class="me-3 fw-bold text-center mb-0">Detalhes da consulta</h1>
		<img src="~/images/icons/search-group.png" width="50" height="50">
	</div>

	<div class="d-flex justify-content-center mt-3">
		<!-- Box  -->
		<div class="row justify-content-center custom-box" id="myBox">
			<div class="row box border-5">

				<div class="container">
					
					<div class="row mt-3 text-center">
						<div class="mb-3">
							<img src="~/images/uploads/agrupamentos/@Model.LogoPicture"
							class="rounded-circle mb-3"
							style="width:15%"
							asp-append-version="true" />
							<dl class="row text-end">
								<div class="row">
									<dt class="col mr-2">
										@Html.DisplayNameFor(model => model.Name)
									</dt>
									<dd class="col text-left">
										@Html.DisplayFor(model => model.Name)
									</dd>
								</div>
								<div class="row">
									<dt class="col mr-2">
										@Html.DisplayNameFor(model => model.Location)
									</dt>

									<dd class="col text-left">
										@Html.DisplayFor(model => model.Location)
									</dd>
								</div>
								<div class="row">
									<dt class="col mr-2">
										@Html.DisplayNameFor(model => model.NIPC)
									</dt>
									<dd class="col text-left">
										@Html.DisplayFor(model => model.NIPC)
									</dd>
								</div>

								<div class="row">
									<dt class="col text-center mt-4">
										<div id="map" style="width: 100%; height: 250px; border-radius: 15px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); margin: 0 auto;">
											<div id="mapError" style="display: none; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; margin: 0 auto;">
												<h4>Localização não encontrada</h4>
											</div>
										</div>
									</dt>
								</div>
								
							</dl>
							<hr />
							<div class="d-flex text-center mt-4 mb-4">
								<div class="col-8 text-right">
									<a asp-action="Index"class="btn btn-secondary custom-button w-50" style="border-radius:6em">
											Voltar
									</a>
								</div>
							</div>
							<div>
								@*<a asp-action="Edit" asp-route-id="@Model?.AgrupamentoID">Edit</a> |*@
							</div>
						</div>
					</div>
				</div>
			</div>
			<!-- // Box -->
		</div>
		<!-- // Fase 1 -->
	</div>

	/**
	* Configura o layout da tela com base no tamanho da tela
	* @function
	*/
	<script>
		window.onload = function () {
			var divBox = document.getElementById("myBox")

			if (screen.width >= 1366 && screen.height >= 768 && screen.width < 1920 && screen.height <= 1080) {
				// Large screen
				divBox.classList.remove("col-6");
				divBox.classList.add("col-8");
			}
		}
	</script>

	<!-- JS do Google Maps API -->
	<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC89_FsNcLfp7fNL0m7KhpJRn5PRrpdxEE&callback=init"></script>

	/**
		* Inicializa o mapa com marcadores de ATLs (Áreas de Trabalho e Lazer).
		* @async
		* @function init
		* @returns {Promise<void>} Retorna uma promessa que resolve quando todos os marcadores forem adicionados ao mapa.
		*/

	/**
		* Inicializa o mapa do Google Maps.
		* @function initMap
		* @param {number} lat - A latitude do centro do mapa.
		* @param {number} lng - A longitude do centro do mapa.
		* @returns {google.maps.Map} O objeto do mapa do Google Maps.
		*/

	/**
		* Recupera informações de ATLs e adiciona marcadores ao mapa.
		* @async
		* @function fetchATLs
		* @returns {Promise<google.maps.Marker[]>} Retorna uma promessa que resolve com um array de objetos Marker do Google Maps.
		*/

	/**
		* Adiciona marcadores ao mapa.
		* @function addMarkers
		* @param {google.maps.Marker[]} markers - O array de objetos Marker do Google Maps.
		* @param {google.maps.Map} map - O objeto do mapa do Google Maps.
		* @returns {void}
		*/

	/**
		* Recupera as coordenadas geográficas de um endereço.
		* @async
		* @function getLocation
		* @param {string} address - O endereço a ser geocodificado.
		* @returns {Promise<{ lat: number, lng: number }>} Retorna uma promessa que resolve com um objeto contendo a latitude e a longitude do endereço.
		*/

	<script>

		async function init() {
			const markers = await fetchATLs();

			if (markers.length > 0) {
				const map = initMap(markers[0].position.lat, markers[0].position.lng);
				addMarkers(markers, map);
			} else {
				console.error('Nenhum ATL encontrado.');
			}
		}

		function initMap(lat, lng) {
			const map = new google.maps.Map(document.getElementById('map'), {
				center: { lat: lat, lng: lng },
				zoom: 13
			});

			return map;
		}

		async function fetchATLs() {
			const agrupamentoId = '@Model.AgrupamentoID';
			const response = await fetch(`/Agrupamentos/GetATLsByAgrupamento?agrupamentoId=${agrupamentoId}`);
			const atls = await response.json();

			const markers = []; // array para armazenar os marcadores

			for (let i = 0; i < atls.length; i++) {
				const atl = atls[i];
				const coordenadoresResponse = await fetch(`/Agrupamentos/GetCoordenadoresByATL?atlId=${atl.atlId}`);
				//console.log(`Fetching coordenadores for AtlId: ${atl.atlId}`);
				const coordenadores = await coordenadoresResponse.json();
				//console.log(`Coordenadores for AtlId ${atl.atlId}:`, coordenadores);
				atl.AtlCoordenadores = coordenadores.coordenadores;
				//console.log(`AtlCoordenadores atribuído ao objeto atl:`, atl.AtlCoordenadores);

				
				const fullAddress = `${atl.address}, ${atl.city}, ${atl.postalCode}`;
				const coordinates = await getLocation(fullAddress);
				atl.latitude = coordinates.lat;
				atl.longitude = coordinates.lng;


				const coordenadoresString = (atl.AtlCoordenadores && atl.AtlCoordenadores.length > 0)
					? atl.AtlCoordenadores.map(ca => `${ca.firstName} ${ca.lastName}`).join(', ')
					: 'Nenhum coordenador encontrado';

				//console.log(`Coordenadores string for AtlId ${atl.atlId}:`, coordenadoresString);

				// adicionar as informações do marcador ao array
				markers.push({
					position: { lat: atl.latitude, lng: atl.longitude },
					content: `<b>${atl.name}</b><br>${atl.address}, ${atl.city}, ${atl.postalCode}<br>Coordenador(es): ${coordenadoresString}`
				});


			}

			return markers;
		}



		function addMarkers(markers, map) {
			markers.forEach(marker => {
				const infoWindow = new google.maps.InfoWindow({
					content: marker.content
				});

				const newMarker = new google.maps.Marker({
					position: marker.position,
					map: map
				});

				newMarker.addListener('click', () => {
					infoWindow.open(map, newMarker);
				});
			});
		}

		async function getLocation(address) {
			return new Promise((resolve, reject) => {
				const geocoder = new google.maps.Geocoder();
				geocoder.geocode({ address: address }, (results, status) => {
					if (status === google.maps.GeocoderStatus.OK) {
						const coordinates = {
							lat: results[0].geometry.location.lat(),
							lng: results[0].geometry.location.lng()
						};
						resolve(coordinates);
					} else {
						reject(new Error('Localização não encontrada'));
					}
				});
			});
		}

		// Inicializar o mapa
		init();
	</script>

}